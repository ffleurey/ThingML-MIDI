/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : XTouchExtenderClient
 **/
public class XTouchExtenderClient extends Component implements IXTouchExtenderClient_xtouch {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tslider_values = " + XTouchExtenderClient_slider_values_var;
result += "\tcurrent_bank = " + XTouchExtenderClient_current_bank_var;
result += "";
return result;
}

public synchronized void slider_via_xtouch(int XTouchExtenderMsgs_slider_ch_var, int XTouchExtenderMsgs_slider_value_var){
final Event _msg = sliderType.instantiate(XTouchExtenderMsgs_slider_ch_var, XTouchExtenderMsgs_slider_value_var);
_msg.setPort(xtouch_port);
receive(_msg);
}

public synchronized void pot_via_xtouch(int XTouchExtenderMsgs_pot_ch_var, int XTouchExtenderMsgs_pot_value_var){
final Event _msg = potType.instantiate(XTouchExtenderMsgs_pot_ch_var, XTouchExtenderMsgs_pot_value_var);
_msg.setPort(xtouch_port);
receive(_msg);
}

public synchronized void button_press_via_xtouch(int XTouchExtenderMsgs_button_press_ch_var, int XTouchExtenderMsgs_button_press_id_var){
final Event _msg = button_pressType.instantiate(XTouchExtenderMsgs_button_press_ch_var, XTouchExtenderMsgs_button_press_id_var);
_msg.setPort(xtouch_port);
receive(_msg);
}

public synchronized void button_release_via_xtouch(int XTouchExtenderMsgs_button_release_ch_var, int XTouchExtenderMsgs_button_release_id_var){
final Event _msg = button_releaseType.instantiate(XTouchExtenderMsgs_button_release_ch_var, XTouchExtenderMsgs_button_release_id_var);
_msg.setPort(xtouch_port);
receive(_msg);
}

private void sendButton_light_on_via_xtouch(int XTouchExtenderMsgs_button_light_on_ch_var, int XTouchExtenderMsgs_button_light_on_id_var){
xtouch_port.send(button_light_onType.instantiate(XTouchExtenderMsgs_button_light_on_ch_var, XTouchExtenderMsgs_button_light_on_id_var));
}

private void sendButton_light_off_via_xtouch(int XTouchExtenderMsgs_button_light_off_ch_var, int XTouchExtenderMsgs_button_light_off_id_var){
xtouch_port.send(button_light_offType.instantiate(XTouchExtenderMsgs_button_light_off_ch_var, XTouchExtenderMsgs_button_light_off_id_var));
}

private void sendButton_light_blink_via_xtouch(int XTouchExtenderMsgs_button_light_blink_ch_var, int XTouchExtenderMsgs_button_light_blink_id_var){
xtouch_port.send(button_light_blinkType.instantiate(XTouchExtenderMsgs_button_light_blink_ch_var, XTouchExtenderMsgs_button_light_blink_id_var));
}

private void sendSet_slider_via_xtouch(int XTouchExtenderMsgs_set_slider_ch_var, int XTouchExtenderMsgs_set_slider_value_var){
xtouch_port.send(set_sliderType.instantiate(XTouchExtenderMsgs_set_slider_ch_var, XTouchExtenderMsgs_set_slider_value_var));
}

private void sendSet_pot_via_xtouch(int XTouchExtenderMsgs_set_pot_ch_var, int XTouchExtenderMsgs_set_pot_value_var){
xtouch_port.send(set_potType.instantiate(XTouchExtenderMsgs_set_pot_ch_var, XTouchExtenderMsgs_set_pot_value_var));
}

private void sendSet_meter_via_xtouch(int XTouchExtenderMsgs_set_meter_ch_var, int XTouchExtenderMsgs_set_meter_value_var){
xtouch_port.send(set_meterType.instantiate(XTouchExtenderMsgs_set_meter_ch_var, XTouchExtenderMsgs_set_meter_value_var));
}

//Attributes
private int[] XTouchExtenderClient_slider_values_var;
private int XTouchExtenderClient_current_bank_var;
private int[] debug_XTouchExtenderClient_slider_values_var;
private int debug_XTouchExtenderClient_current_bank_var;
//Ports
private Port xtouch_port;
//Message types
protected final SliderMessageType sliderType = new SliderMessageType();
protected final PotMessageType potType = new PotMessageType();
protected final Set_sliderMessageType set_sliderType = new Set_sliderMessageType();
protected final Set_potMessageType set_potType = new Set_potMessageType();
protected final Set_meterMessageType set_meterType = new Set_meterMessageType();
protected final Button_pressMessageType button_pressType = new Button_pressMessageType();
protected final Button_releaseMessageType button_releaseType = new Button_releaseMessageType();
protected final Button_light_onMessageType button_light_onType = new Button_light_onMessageType();
protected final Button_light_offMessageType button_light_offType = new Button_light_offMessageType();
protected final Button_light_blinkMessageType button_light_blinkType = new Button_light_blinkMessageType();
//Empty Constructor
public XTouchExtenderClient() {
super();
XTouchExtenderClient_current_bank_var = (int) 0;
}

//Constructor (all attributes)
public XTouchExtenderClient(String name, final int[] XTouchExtenderClient_slider_values_var, final int XTouchExtenderClient_current_bank_var) {
super(name);
this.XTouchExtenderClient_slider_values_var = XTouchExtenderClient_slider_values_var;
this.XTouchExtenderClient_current_bank_var = XTouchExtenderClient_current_bank_var;
}

//Getters and Setters for non readonly/final attributes
public int[] getXTouchExtenderClient_slider_values_var() {
return XTouchExtenderClient_slider_values_var;
}

public void setXTouchExtenderClient_slider_values_var(int[] XTouchExtenderClient_slider_values_var) {
this.XTouchExtenderClient_slider_values_var = XTouchExtenderClient_slider_values_var;
}

public int getXTouchExtenderClient_current_bank_var() {
return XTouchExtenderClient_current_bank_var;
}

public void setXTouchExtenderClient_current_bank_var(int XTouchExtenderClient_current_bank_var) {
this.XTouchExtenderClient_current_bank_var = XTouchExtenderClient_current_bank_var;
}

//Getters for Ports
public Port getXtouch_port() {
return xtouch_port;
}
private CompositeState buildXTouchExtenderClient_XTouchExtenderTestSC(){
final AtomicState state_XTouchExtenderClient_XTouchExtenderTestSC_Running = new AtomicState("Running");
state_XTouchExtenderClient_XTouchExtenderTestSC_Running.onEntry(()->{
select_bank();
send_slider_values();
});
Handler h1444498032 = new Handler();
h1444498032.from(state_XTouchExtenderClient_XTouchExtenderTestSC_Running);
h1444498032.event(sliderType);
h1444498032.port(xtouch_port);
h1444498032.action((Event e)->{
final SliderMessageType.SliderMessage slider = (SliderMessageType.SliderMessage) e;
XTouchExtenderClient_slider_values_var[8 * getXTouchExtenderClient_current_bank_var() + slider.ch] = (int) (slider.value);
});

Transition h23235446 = new Transition();
h23235446.from(state_XTouchExtenderClient_XTouchExtenderTestSC_Running).to(state_XTouchExtenderClient_XTouchExtenderTestSC_Running);
h23235446.event(button_pressType);
h23235446.guard((Event e)->{
final Button_pressMessageType.Button_pressMessage button_press = (Button_pressMessageType.Button_pressMessage) e;
return button_press.ch < 4 && button_press.id == 1;
});

h23235446.port(xtouch_port);
h23235446.action((Event e)->{
final Button_pressMessageType.Button_pressMessage button_press = (Button_pressMessageType.Button_pressMessage) e;
XTouchExtenderClient_current_bank_var = (int) (button_press.ch);
});

final CompositeState state_XTouchExtenderClient_XTouchExtenderTestSC = new CompositeState("XTouchExtenderTestSC");
state_XTouchExtenderClient_XTouchExtenderTestSC.onEntry(()->{
init_slider_values();
XTouchExtenderClient_current_bank_var = (int) (0);
});
state_XTouchExtenderClient_XTouchExtenderTestSC.add(state_XTouchExtenderClient_XTouchExtenderTestSC_Running);
state_XTouchExtenderClient_XTouchExtenderTestSC.initial(state_XTouchExtenderClient_XTouchExtenderTestSC_Running);
return state_XTouchExtenderClient_XTouchExtenderTestSC;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
xtouch_port = new Port("xtouch", this);
} else {
xtouch_port = ((XTouchExtenderClient)root).xtouch_port;
}
if (session == null){
//Init state machine
behavior = buildXTouchExtenderClient_XTouchExtenderTestSC();
}
return this;
}

private void init_slider_values() {
int i_var = (int) (0);

while(i_var < 32) {
XTouchExtenderClient_slider_values_var[i_var] = (int) (0);
i_var = (int) (i_var + 1);

}
}
private void send_slider_values() {
int i_var = (int) (0);

while(i_var < 8) {
sendSet_slider_via_xtouch((int) (i_var), (int) (XTouchExtenderClient_slider_values_var[8 * getXTouchExtenderClient_current_bank_var() + i_var]
));
i_var = (int) (i_var + 1);

}
}
private void select_bank() {
int i_var = (int) (0);

while(i_var < 4) {
sendButton_light_off_via_xtouch((int) (i_var), (int) (1));
i_var = (int) (i_var + 1);

}
sendButton_light_on_via_xtouch((int) (getXTouchExtenderClient_current_bank_var()), (int) (1));
}
}
