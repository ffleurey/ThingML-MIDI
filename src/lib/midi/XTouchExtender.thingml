import "MidiParser.thingml"
import "../_Timer.thingml"

thing fragment XTouchExtenderMsgs {
	
	message slider(ch : UInt8, value : UInt8)
	message pot(ch : UInt8, value : UInt8)
	
	// Same as above but with a slower event rate
	message slider_slow(ch : UInt8, value : UInt8)
	message pot_slow(ch : UInt8, value : UInt8)
	
	message set_slider(ch : UInt8, value : UInt16)
	message set_pot(ch : UInt8, value : UInt8)
	message set_meter(ch : UInt8, value : UInt8)
	
	message button_press(ch : UInt8, id : UInt8)
	message button_release(ch : UInt8, id : UInt8)
	
	message button_light_on(ch : UInt8, id : UInt8)
	message button_light_off(ch : UInt8, id : UInt8)
	message button_light_blink(ch : UInt8, id : UInt8)
	
}

/*
 * Driver for X-Touch Extender in CTRL mode
 */

thing XTouchExtender includes XTouchExtenderMsgs, MidiMsgs, TimerMsgs {
	
  required port midi {
  	 sends note_on, note_off, pitch_bend_change, control_change
  	 receives note_on, note_off, pitch_bend_change, control_change
  }
  
  required port clock {
  	sends timer_start, timer_cancel
  	receives timer_timeout
  }
  
  provided port xtouch {
  	sends slider, pot, button_press, button_release, slider_slow, pot_slow
  	receives button_light_on, button_light_off, button_light_blink, set_slider, set_pot, set_meter
  }
  
  statechart XTouchExtenderSC init Running {
  	
  	property last_slider : UInt8[8]
  	property last_pot 	 : UInt8[8]
  	
  	on entry do
  		var i : UInt8 = 0
  		while(i<8) do
  			last_slider[i] = 0xFF
  			last_pot[i] = 0xFF
  			i=i+1
  		end
  	end
  	
  	state Running {
  		
  		internal event e : midi?note_on action do
  			//'printf("[->NOTE ON] ch:%d, key:%d, vel:%d\n", '&e.channel&', '&e.key&', '&e.velocity&');'
  			print "[->] NOTE ON \t\tchannel:" print e.channel print " \tkey:" print e.key print " \tvelocity:" print e.velocity print "\n"
  			//midi!note_on(e.channel, e.key, e.velocity)
  			
  			if (e.key >= 110 and e.key<118) do // This is a slider touch event
  				if (e.velocity == 0) xtouch!button_press(e.key-110, 0)
  				else xtouch!button_release(e.key-110, 0)
  			end
  			else if (e.key >= 32 and e.key<40) do // Select button press
  				if (e.velocity == 0) xtouch!button_press(e.key-32, 1)
  				else xtouch!button_release(e.key-32, 1)
  			end
  			else if (e.key >= 24 and e.key<32) do // Mute button press
  				if (e.velocity == 0) xtouch!button_press(e.key-24, 2)
  				else xtouch!button_release(e.key-24, 2)
  			end
  			else if (e.key >= 16 and e.key<24) do // Solo button press
  				if (e.velocity == 0) xtouch!button_press(e.key-16, 3)
  				else xtouch!button_release(e.key-16, 3)
  			end
  			else if (e.key >= 8 and e.key<16) do // Rec button press
  				if (e.velocity == 0) xtouch!button_press(e.key-8, 4)
  				else xtouch!button_release(e.key-8, 4)
  			end
  			else if (e.key >= 0 and e.key<8) do // Pot button press
  				if (e.velocity == 0) xtouch!button_press(e.key, 5)
  				else xtouch!button_release(e.key, 5)
  			end
  		end
  		
  		internal event e : clock?timer_timeout action do
  			if (e.id < 8) do			// Slider
  				xtouch!slider_slow(e.id, last_slider[e.id])
  				last_slider[e.id] = 0xFF
  			end
  			else if (e.id < 16) do		// Pot
  				xtouch!pot_slow(e.id-8, last_pot[e.id-8])
  				last_pot[e.id-8] = 0xFF
  			end
  		end
  		
  		internal event e : midi?control_change action do
  			print "[->] CONTROL CHG \tchannel:" print e.channel print " \tcontrol:" print e.ctrl print " \tvelocity:" print e.value print "\n"
  			//midi!control_change(e.channel, e.ctrl, e.value)
  			
  			if (e.ctrl >= 70 and e.ctrl<78) do // This is a slider change
  			    var idx : UInt8 = e.ctrl-70
  			    if (last_slider[idx] == 0xFF) clock!timer_start(idx, 333)
  			    last_slider[idx] = e.value
  				xtouch!slider(idx, e.value)
  			end
  			else if (e.ctrl >= 80 and e.ctrl<88) do // This is a pot change
  				var idx : UInt8 = e.ctrl-80
  				if (last_pot[idx] == 0xFF) clock!timer_start(idx+8, 333)
  				last_pot[idx] = e.value
  				xtouch!pot(idx, e.value)
  			end
  		end
  		
  		internal event e : xtouch?set_slider action do
  			midi!control_change(0, 70 + e.ch, e.value)
  		end
  		
  		internal event e : xtouch?set_pot action do
  			midi!control_change(0, 80 + e.ch, e.value)
  		end
  		
  		internal event e : xtouch?set_meter action do
  			midi!control_change(0, 90 + e.ch, e.value)
  		end
  		
  		internal event e : xtouch?button_light_off action do
  			if (e.id == 1) midi!note_on(0, e.ch + 32, 0)
  			if (e.id == 2) midi!note_on(0, e.ch + 24, 0)
  			if (e.id == 3) midi!note_on(0, e.ch + 16, 0)
  			if (e.id == 4) midi!note_on(0, e.ch + 8, 0)
  		end
  		
  		internal event e : xtouch?button_light_blink action do
  			if (e.id == 1) midi!note_on(0, e.ch + 32, 64)
  			if (e.id == 2) midi!note_on(0, e.ch + 24, 64)
  			if (e.id == 3) midi!note_on(0, e.ch + 16, 64)
  			if (e.id == 4) midi!note_on(0, e.ch + 8, 64)
  		end
  		
  		internal event e : xtouch?button_light_on action do
  			if (e.id == 1) midi!note_on(0, e.ch + 32, 127)
  			if (e.id == 2) midi!note_on(0, e.ch + 24, 127)
  			if (e.id == 3) midi!note_on(0, e.ch + 16, 127)
  			if (e.id == 4) midi!note_on(0, e.ch + 8, 127)
  		end
  		
  	}
  }
}

